package services;
import services.DemandeService;
import services.AnnulerDemande;
import services.ConsulterDemande;
import models.DemandeActivite;
import models.DemandeHotel;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class ClientActions {

    private String clientName;
    private List<Object> mesDemandes;  // List to store all the client requests

    // Constructor
    public ClientActions(String clientName) {
        this.clientName = clientName;
        this.mesDemandes = new ArrayList<>();
    }

    // Method to handle the service request
    public void DemandeService() {
        Scanner scanner = new Scanner(System.in);
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

        System.out.println("\nQuel type de service voulez-vous demander ?");
        System.out.println("1/ Demande d'H√¥tel");
        System.out.println("2/ Demande d'Activit√©");
        System.out.print("Entrez votre choix (1 ou 2) : ");

        int choix = scanner.nextInt();
        scanner.nextLine(); // Consommer la ligne restante

        if (choix == 1) { // Demande d'H√¥tel
            // Code pour la demande d'h√¥tel
            System.out.print("\nNom de l'h√¥tel : ");
            String hotelName = scanner.nextLine();

            System.out.print("Date d'arriv√©e (JJ/MM/AAAA) : ");
            Date date_arriv√©e = null;
            while (date_arriv√©e == null) {
                try {
                    date_arriv√©e = dateFormat.parse(scanner.nextLine());
                } catch (ParseException e) {
                    System.out.print("Format invalide ! ");
                }
            }

            System.out.print("\nDate de d√©part (JJ/MM/AAAA) : ");
            Date date_d√©part = null;
            while (date_d√©part == null) {
                try {
                    date_d√©part = dateFormat.parse(scanner.nextLine());
                    if (!date_d√©part.after(date_arriv√©e)) {
                        System.out.print(" La date de d√©part doit √™tre apr√®s la date d'arriv√©e ! R√©essayez : ");
                        date_d√©part = null;
                    }
                } catch (ParseException e) {
                    System.out.print("Format invalide ! Essayez encore (JJ/MM/AAAA) : ");
                }
            }

            // Calcul automatique du nombre de nuits
            long diffMillis = date_d√©part.getTime() - date_arriv√©e.getTime();
            int nombreNuits = (int) (diffMillis / (1000 * 60 * 60 * 24));
            System.out.println(" Nombre de nuits : " + nombreNuits);

            System.out.print("Nombre d'adultes : ");
            int nombreAdultes = scanner.nextInt();

            System.out.print("Nombre d'enfants : ");
            int nombreEnfants = scanner.nextInt();

            System.out.print("Nombre de chambres : ");
            int nombreChambres = scanner.nextInt();
            scanner.nextLine();

            System.out.println("Type de chambre : ");
            System.out.println("1. Simple");
            System.out.println("2. Double");
            System.out.println("3. Suite");
            System.out.print("Choisissez une option (: ");
            int choixChambre = scanner.nextInt();
            scanner.nextLine();  // Pour consommer la ligne restante apr√®s nextInt()

            String typeChambre = "";
            switch (choixChambre) {
                case 1:
                    typeChambre = "Simple";
                    break;
                case 2:
                    typeChambre = "Double";
                    break;
                case 3:
                    typeChambre = "Suite";
                    break;
                default:
                    System.out.println("Choix invalide.");
                    break;
            }

            System.out.println("Ponsion : ");
            System.out.println("1. Demi-pension");
            System.out.println("2. Pension compl√®te");
            System.out.print("Choisissez une option  : ");
            int choixPonsion = scanner.nextInt();
            scanner.nextLine();  // Pour consommer la ligne restante apr√®s nextInt()

            String portion = "";
            switch (choixPonsion) {
                case 1:
                    portion = "Demi-pension";
                    break;
                case 2:
                    portion = "Pension compl√®te";
                    break;
                default:
                    System.out.println("Choix invalide.");
                    break;
            }

            System.out.println("Type de chambre choisi : " + typeChambre);
            System.out.println("Portion choisie : " + portion);


            // Cr√©ation et ajout de la demande d'h√¥tel
            DemandeHotel demande = new DemandeHotel(clientName, hotelName, date_arriv√©e, date_d√©part, nombreNuits, nombreAdultes, nombreEnfants, nombreChambres, typeChambre, portion);
            ajouterDemande(demande);

        }
        else if (choix == 2) { // Demande d'Activit√©
            // Demander les informations pour la demande d'activit√©
            System.out.println("\n Choisissez une activit√© :");
            System.out.println("1Ô∏è‚É£ Ski");
            System.out.println("2Ô∏è‚É£ Plong√©e");
            System.out.println("3Ô∏è‚É£ Randonn√©e");
            System.out.print("üëâ Entrez votre choix (1, 2 ou 3) : ");

            int choixActivite = scanner.nextInt();
            scanner.nextLine(); // vider le buffer

            String nomActivite = "";
            switch (choixActivite) {
                case 1:
                    nomActivite = "Ski";
                    break;
                case 2:
                    nomActivite = "Plong√©e";
                    break;
                case 3:
                    nomActivite = "Randonn√©e";
                    break;
                default:
                    System.out.println(" Choix invalide !");
                    return; // on sort si le choix est invalide
            }

            // Define the dateActivite variable
            Date dateActivite = null;
            System.out.print(" Date de l'activit√© (format AAAA-MM-JJ) : ");
            while (dateActivite == null) {
                try {
                    dateActivite = dateFormat.parse(scanner.nextLine());
                } catch (ParseException e) {
                    System.out.print("Format invalide ! Essayez encore (AAAA-MM-JJ) : ");
                }
            }

            System.out.print(" Nombre de participants : ");
            int nbParticipants = scanner.nextInt();
            scanner.nextLine(); // vider le buffer

            System.out.print(" Guide n√©cessaire ? (oui/non) : ");
            String guideStr = scanner.nextLine();
            boolean guideNecessaire = guideStr.equalsIgnoreCase("oui");

            // Cr√©ation et ajout de la demande
            DemandeActivite demande = new DemandeActivite(clientName, nomActivite, dateActivite, nbParticipants, guideNecessaire);
            ajouterDemande(demande);
        }

    else {
            System.out.println("Choix invalide !");
        }
    }

    // M√©thode pour ajouter une demande √† la liste
    public void ajouterDemande(Object demande) {
        mesDemandes.add(demande);
        System.out.println("Demande ajout√©e avec succ√®s !");
    }

    // Afficher toutes les demandes
    public void afficherDemandes() {
        for (Object demande : mesDemandes) {
            System.out.println(demande);
        }
    }

    // Getter pour acc√©der √† mesDemandes
    public List<Object> getMesDemandes() {
        return mesDemandes;
    }
    public void ConsulterDemande() {
        if (mesDemandes.isEmpty()) {
            System.out.println("Vous n'avez aucune demande.");
        } else {
            System.out.println("\nVoici toutes vos demandes : ");
            for (Object demande : mesDemandes) {
                System.out.println(demande);
            }
        }
    }

    public void AnnulerDemande() {
        Scanner scanner = new Scanner(System.in);

        // Affichage des demandes existantes
        System.out.println("\nVoici vos demandes actuelles : ");
        afficherDemandes();

        // Demande de l'index de la demande √† annuler
        System.out.print("\nEntrez l'index de la demande √† annuler (0 pour le premier) : ");
        int index = scanner.nextInt();

        // V√©rifier si l'index est valide
        if (index >= 0 && index < mesDemandes.size()) {
            mesDemandes.remove(index);
            System.out.println("Demande annul√©e avec succ√®s.");
        } else {
            System.out.println("Index invalide.");
        }
    }

}
